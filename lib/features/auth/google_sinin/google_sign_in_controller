import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class GoogleAuthController extends GetxController {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  bool isLoading = false;
  User? user;

  @override
  void onInit() {
    super.onInit();
    checkExistingSignIn();
  }

  Future<void> checkExistingSignIn() async {
    final GoogleSignInAccount? googleUser =
        await GoogleSignIn().signInSilently();
    if (googleUser != null) {
      await signInWithGoogle(googleUser: googleUser, silent: true);
    }
  }

  Future<void> signInWithGoogle({GoogleSignInAccount? googleUser, bool silent = false}) async {
    try {
      isLoading = true;
      update();

      GoogleSignInAccount? userAccount = googleUser;

      // If not silent sign-in, open account picker
      if (userAccount == null) {
        userAccount = await GoogleSignIn().signIn();
        if (userAccount == null) {
          isLoading = false;
          update();
          return; // user canceled
        }
      }

      final GoogleSignInAuthentication googleAuth =
          await userAccount.authentication;

      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      UserCredential userCredential =
          await _auth.signInWithCredential(credential);

      user = userCredential.user;

      if (user != null) {
        DocumentSnapshot doc =
            await _firestore.collection('auth').doc(user!.uid).get();

        if (!doc.exists) {
          await _firestore.collection('auth').doc(user!.uid).set({
            'uid': user!.uid,
            'name': user!.displayName ?? 'No Name',
            'email': user!.email,
            'role': 'customer', // default role
            'createAt': DateTime.now(),
          });
        }

        String role = (doc.exists) ? doc['role'] : 'customer';
        if (role == "admin") {
          Get.offAllNamed(RouterConstant.adminDashboard);
        } else {
          Get.offAllNamed(RouterConstant.homeScreen);
        }

        if (!silent) Get.snackbar('Success', 'Login Successful with Google');
      }
    } on FirebaseAuthException catch (e) {
      Get.snackbar('Error', e.message ?? 'Something went wrong');
    } catch (e) {
      Get.snackbar('Error', e.toString());
    } finally {
      isLoading = false;
      update();
    }
  }

  // Logout method
  Future<void> signOut() async {
    await GoogleSignIn().signOut();
    await _auth.signOut();
  }
}
